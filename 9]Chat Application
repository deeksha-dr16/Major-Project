Project Structure
The project will have the following structure:
mern-chat-app/
├── backend/
│   ├── config/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── server.js
│   ├── socket.js
│   └── .env
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── App.js
│   │   └── index.js
│   └── package.json
└── README.md


3. Backend Setup
Step 1: Initialize the Backend
Create the Backend Directory:
mkdir backend && cd backend
Initialize a Node.js Project:
npm init -y

Install Necessary Dependencies:
npm install express mongoose dotenv cors bcryptjs jsonwebtoken socket.io
Create Basic Files and Folders:

Create server.js, socket.js, config, controllers, models, routes, and middleware folders.
Step 2: Set Up the Server
server.js:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { createServer } = require('http');
const { Server } = require('socket.io');
require('dotenv').config();
const socketHandler = require('./socket');

// Initialize the app
const app = express();
const httpServer = createServer(app);

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch((err) => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/users', require('./routes/userRoutes'));
app.use('/api/chats', require('./routes/chatRoutes'));

// Socket.io setup
const io = new Server(httpServer, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

socketHandler(io);

// Start the server
const PORT = process.env.PORT || 5000;
httpServer.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


Step 3: Configure Environment Variables
Create a .env file in the backend directory:
MONGO_URI=mongodb://localhost:27017/mern-chat-app
JWT_SECRET=your_jwt_secret
Replace the MongoDB URI with your own if you're using MongoDB Atlas or a different setup.

Step 4: Define Models
User Model: Create a models folder and add a file named User.js:

models/User.js:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  chats: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Chat',
    },
  ],
}, {
  timestamps: true,
});

module.exports = mongoose.model('User', userSchema);

Chat Model: Add a file named Chat.js:

models/Chat.js:
const mongoose = require('mongoose');

const chatSchema = new mongoose.Schema({
  roomName: {
    type: String,
    required: true,
    unique: true,
  },
  users: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
  ],
  messages: [
    {
      sender: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      message: {
        type: String,
        required: true,
      },
      timestamp: {
        type: Date,
        default: Date.now,
      },
    },
  ],
}, {
  timestamps: true,
});

module.exports = mongoose.model('Chat', chatSchema);


Step 5: Create Controllers
Create a controllers folder and add files for users and chats.

userController.js:
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Register a new user
const registerUser = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ username, email, password: hashedPassword });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Login a user
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (user && await bcrypt.compare(password, user.password)) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Invalid credentials' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get user profile
const getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  registerUser,
  loginUser,
  getUserProfile,
};


chatController.js:
const Chat = require('../models/Chat');
const User = require('../models/User');

// Create or join a chat room
const joinChatRoom = async (req, res) => {
  const { roomName } = req.body;
  const userId = req.user.id;

  try {
    let chat = await Chat.findOne({ roomName });

    if (!chat) {
      chat = new Chat({ roomName, users: [userId] });
      await chat.save();
    } else if (!chat.users.includes(userId)) {
      chat.users.push(userId);
      await chat.save();
    }

    res.json(chat);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get chat messages
const getChatMessages = async (req, res) => {
  try {
    const chat = await Chat.findById(req.params.id).populate('messages.sender', 'username');
    if (chat) {
      res.json(chat.messages);
    } else {
      res.status(404).json({ message: 'Chat not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Send a message
const sendMessage = async (req, res) => {
  const { message } = req.body;
  const userId = req.user.id;
  const chatId = req.params.id;

  try {
    const chat = await Chat.findById(chatId);
    if (chat) {
      chat.messages.push({ sender: userId, message });
      await chat.save();
      res.json(chat.messages);
    } else {
      res.status(404).json({ message: 'Chat not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  joinChatRoom,
  getChatMessages,
  sendMessage,
};


Step 6: Setup Routes
Create a routes folder and add userRoutes.js and chatRoutes.js.

userRoutes.js:
const express = require('express');
const { registerUser, loginUser, getUserProfile } = require('../controllers/userController');
const auth = require('../middleware/auth');

const router = express.Router();

router.post('/register', registerUser);
router.post('/login', loginUser);
router.get('/profile', auth, getUserProfile);

module.exports = router;


chatRoutes.js:
const express = require('express');
const { joinChatRoom, getChatMessages, sendMessage } = require('../controllers/chatController');
const auth = require('../middleware/auth');

const router = express.Router();

router.post('/join', auth, joinChatRoom);
router.get('/:id', auth, getChatMessages);
router.post('/:id/message', auth, sendMessage);

module.exports = router;


auth.js (middleware for authentication):
const jwt = require('jsonwebtoken');

const auth = (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

module.exports = auth;


Step 7: Set Up Socket.io
socket.js:
module.exports = (io) => {
  io.on('connection', (socket) => {
    console.log('A user connected');

    socket.on('joinRoom', (room) => {
      socket.join(room);
      console.log(`User joined room: ${room}`);
    });

    socket.on('chatMessage', (room, message) => {
      io.to(room).emit('message', message);
    });

    socket.on('disconnect', () => {
      console.log('User disconnected');
    });
  });
};


4. Frontend Setup
Step 1: Initialize React Application
Create the Frontend Directory:
mkdir frontend && cd frontend

Initialize a React Application:
npx create-react-app .

Install Necessary Dependencies:
npm install axios socket.io-client react-router-dom

Step 2: Create Components and Pages
Create these essential components and pages:

HomePage.js:
import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import axios from 'axios';

const HomePage = () => {
  const [roomName, setRoomName] = useState('');
  const history = useHistory();

  const joinRoom = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.post('/api/chats/join', { roomName }, {
        headers: { Authorization: token },
      });
      history.push(`/chat/${roomName}`);
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div>
      <h1>Join a Chat Room</h1>
      <input
        type="text"
        placeholder="Room Name"
        value={roomName}
        onChange={(e) => setRoomName(e.target.value)}
      />
      <button onClick={joinRoom}>Join</button>
    </div>
  );
};

export default HomePage;


ChatRoomPage.js:
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import io from 'socket.io-client';
import axios from 'axios';

const socket = io('http://localhost:5000');  // Update with your server URL

const ChatRoomPage = () => {
  const { room } = useParams();
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    socket.emit('joinRoom', room);

    socket.on('message', (msg) => {
      setMessages((prevMessages) => [...prevMessages, msg]);
    });

    return () => {
      socket.off('message');
    };
  }, [room]);

  const sendMessage = async () => {
    const token = localStorage.getItem('token');
    await axios.post(`/api/chats/${room}/message`, { message }, {
      headers: { Authorization: token },
    });

    socket.emit('chatMessage', room, { sender: 'You', message });
    setMessage('');
  };

  return (
    <div>
      <h1>Room: {room}</h1>
      <div>
        {messages.map((msg, index) => (
          <p key={index}><strong>{msg.sender}</strong>: {msg.message}</p>
        ))}
      </div>
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyPress={(e) => e.key === 'Enter' ? sendMessage() : null}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

export default ChatRoomPage;


ProfilePage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ProfilePage = () => {
  const [user, setUser] = useState({});

  useEffect(() => {
    const fetchUser = async () => {
      const token = localStorage.getItem('token');
      const { data } = await axios.get('/api/users/profile', {
        headers: { Authorization: token },
      });
      setUser(data);
    };

    fetchUser();
  }, []);

  return (
    <div>
      <h1>Profile</h1>
      <p>Username: {user.username}</p>
      <p>Email: {user.email}</p>
    </div>
  );
};

export default ProfilePage;

Step 3: Configure React Router
In App.js, set up the routes for navigation:

App.js:
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './pages/HomePage';
import ChatRoomPage from './pages/ChatRoomPage';
import ProfilePage from './pages/ProfilePage';

const App = () => {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={HomePage} />
        <Route path="/chat/:room" component={ChatRoomPage} />
        <Route path="/profile" component={ProfilePage} />
        {/* Additional Routes for registration, etc. */}
      </Switch>
    </Router>
  );
};

export default App;

5. Run the Application
Step 1: Run the Backend
In the backend directory:
npm start

Step 2: Run the Frontend
In the frontend directory:
npm start
