Project Setup
a. Initialize the Project
Create a new directory for your project and navigate into it.

Initialize a new Node.js project:
npm init -y

Install necessary dependencies for the back-end:
npm install express mongoose cors dotenv
npm install --save-dev nodemon


b. Set Up the Server
Create an index.js file for your Node.js server and set up a basic Express server:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 5000;

mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => app.listen(PORT, () => console.log(`Server running on port ${PORT}`)))
  .catch((error) => console.error(error.message));



2. Design the Database Schema
a. Create Models
Create a models directory with models for portfolio content: User.js, Project.js, Skill.js, and Experience.js.


User Model (User.js):
const mongoose = require('mongoose');

const userSchema = mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  bio: { type: String },
  profilePicture: { type: String }
});

module.exports = mongoose.model('User', userSchema);


Project Model (Project.js):
const mongoose = require('mongoose');

const projectSchema = mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  url: { type: String },
  imageUrl: { type: String },
  technologies: [String],
  createdAt: { type: Date, default: new Date() },
});

module.exports = mongoose.model('Project', projectSchema);

Skill Model (Skill.js):
const mongoose = require('mongoose');

const skillSchema = mongoose.Schema({
  name: { type: String, required: true },
  level: { type: String },  // Beginner, Intermediate, Advanced
  createdAt: { type: Date, default: new Date() },
});

module.exports = mongoose.model('Skill', skillSchema);


Experience Model (Experience.js):
const mongoose = require('mongoose');

const experienceSchema = mongoose.Schema({
  company: { type: String, required: true },
  position: { type: String, required: true },
  duration: { type: String },  // E.g., "Jan 2020 - Present"
  description: { type: String },
  createdAt: { type: Date, default: new Date() },
});

module.exports = mongoose.model('Experience', experienceSchema);
3. Implement CRUD Operations
a. Create Routes
Create a routes directory with files for each entity: user.js, project.js, skill.js, and experience.js.


User Routes (user.js):
const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Register user
router.post('/register', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Login user
router.post('/login', async (req, res) => {
  // Implement login logic
});

// Get user profile
router.get('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    res.status(200).json(user);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

module.exports = router;


Project Routes (project.js):
const express = require('express');
const router = express.Router();
const Project = require('../models/Project');

// Create a new project
router.post('/', async (req, res) => {
  try {
    const project = new Project(req.body);
    await project.save();
    res.status(201).json(project);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get all projects
router.get('/', async (req, res) => {
  try {
    const projects = await Project.find();
    res.status(200).json(projects);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a project
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updatedProject = await Project.findByIdAndUpdate(id, req.body, { new: true });
    res.status(200).json(updatedProject);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Delete a project
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await Project.findByIdAndRemove(id);
    res.status(200).json({ message: 'Project deleted successfully.' });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

module.exports = router;



b. Integrate Routes into the Server
Update index.js to use these routes:
const userRoutes = require('./routes/user');
const projectRoutes = require('./routes/project');
const skillRoutes = require('./routes/skill');
const experienceRoutes = require('./routes/experience');

app.use('/users', userRoutes);
app.use('/projects', projectRoutes);
app.use('/skills', skillRoutes);
app.use('/experiences', experienceRoutes);


4. Develop the Front-End with React
a. Set Up React Project
Initialize a new React project:
npx create-react-app client
cd client
npm install axios react-router-dom


c. Set Up React Router
Configure routing in App.js:
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import Dashboard from './components/Dashboard';
import Register from './components/Register';
import Login from './components/Login';
import Profile from './components/Profile';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/dashboard" component={Dashboard} />
        <Route path="/register" component={Register} />
        <Route path="/login" component={Login} />
        <Route path="/profile/:id" component={Profile} />
      </Switch>
    </Router>
  );
}

export default App;
