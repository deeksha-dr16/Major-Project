 Project Structure
The project will have the following structure:
mern-job-board/
├── backend/
│   ├── config/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── server.js
│   └── .env
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── App.js
│   │   └── index.js
│   └── package.json
└── README.md
3. Backend Setup
Step 1: Initialize the Backend
Create the Backend Directory:
mkdir backend && cd backend


Initialize a Node.js Project:
npm init -y
Install Necessary Depends
npm install express mongoose dotenv cors bcryptjs jsonwebtoken
Create Basic Files and Folders:

Create server.js, config, controllers, models, routes, and middleware folders.

Step 2: Set Up the Server
server.js:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

// Initialize the app
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch((err) => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/jobs', require('./routes/jobRoutes'));
app.use('/api/users', require('./routes/userRoutes'));

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


Step 3: Configure Environment Variables
Create a .env file in the backend directory:
MONGO_URI=mongodb://localhost:27017/mern-job-board
JWT_SECRET=your_jwt_secret
Replace the MongoDB URI with your own if you're using MongoDB Atlas or a different setup.

Step 4: Define Models
Job Model: Create a models folder and add a file named Job.js:

models/Job.js:
const mongoose = require('mongoose');

const jobSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  company: {
    type: String,
    required: true,
  },
  location: {
    type: String,
    required: true,
  },
  salary: {
    type: Number,
  },
  applicants: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
  ],
}, {
  timestamps: true,
});

module.exports = mongoose.model('Job', jobSchema);
User Model: Add a file named User.js:

models/User.js:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  appliedJobs: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Job',
    },
  ],
}, {
  timestamps: true,
});

module.exports = mongoose.model('User', userSchema);

Step 5: Create Controllers
Create a controllers folder and add files for jobs and users.

jobController.js:
const Job = require('../models/Job');

// Create a new job
const createJob = async (req, res) => {
  const { title, description, company, location, salary } = req.body;

  try {
    const newJob = new Job({ title, description, company, location, salary });
    const savedJob = await newJob.save();
    res.status(201).json(savedJob);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get all jobs
const getAllJobs = async (req, res) => {
  try {
    const jobs = await Job.find({});
    res.status(200).json(jobs);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get a single job by ID
const getJobById = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (job) {
      res.status(200).json(job);
    } else {
      res.status(404).json({ message: 'Job not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Update a job
const updateJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (job) {
      job.title = req.body.title || job.title;
      job.description = req.body.description || job.description;
      job.company = req.body.company || job.company;
      job.location = req.body.location || job.location;
      job.salary = req.body.salary || job.salary;

      const updatedJob = await job.save();
      res.json(updatedJob);
    } else {
      res.status(404).json({ message: 'Job not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Delete a job
const deleteJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (job) {
      await job.remove();
      res.json({ message: 'Job removed' });
    } else {
      res.status(404).json({ message: 'Job not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Apply to a job
const applyToJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    const user = await User.findById(req.user.id);

    if (job && user) {
      job.applicants.push(user._id);
      user.appliedJobs.push(job._id);

      await job.save();
      await user.save();

      res.json({ job, user });
    } else {
      res.status(404).json({ message: 'Job or User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  createJob,
  getAllJobs,
  getJobById,
  updateJob,
  deleteJob,
  applyToJob,
};

userController.js:
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Register a new user
const registerUser = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Login a user
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (user && await bcrypt.compare(password, user.password)) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Invalid credentials' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get user profile
const getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  registerUser,
  loginUser,
  getUserProfile,
};

Step 6: Setup Routes
Create a routes folder and add jobRoutes.js and userRoutes.js.

jobRoutes.js:
const express = require('express');
const { createJob, getAllJobs, getJobById, updateJob, deleteJob, applyToJob } = require('../controllers/jobController');
const auth = require('../middleware/auth');

const router = express.Router();

router.route('/').get(getAllJobs).post(auth, createJob);
router.route('/:id').get(getJobById).put(auth, updateJob).delete(auth, deleteJob);
router.post('/apply/:id', auth, applyToJob);

module.exports = router;


userRoutes.js:
const express = require('express');
const { registerUser, loginUser, getUserProfile } = require('../controllers/userController');
const auth = require('../middleware/auth');

const router = express.Router();

router.post('/register', registerUser);
router.post('/login', loginUser);
router.get('/profile', auth, getUserProfile);

module.exports = router;
auth.js (middleware for authentication):
const jwt = require('jsonwebtoken');

const auth = (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

module.exports = auth;

4. Frontend Setup
Step 1: Initialize React Application
Create the Frontend Directory:
mkdir frontend && cd frontend
Initialize a new React Application:
npx create-react-app .
Install Necessary Dependencies:
npm install axios react-router-dom

Step 2: Create Components and Pages

HomePage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const HomePage = () => {
  const [jobs, setJobs] = useState([]);

  useEffect(() => {
    const fetchJobs = async () => {
      const { data } = await axios.get('/api/jobs');
      setJobs(data);
    };

    fetchJobs();
  }, []);

  return (
    <div>
      <h1>Available Jobs</h1>
      {jobs.map(job => (
        <div key={job._id}>
          <Link to={`/jobs/${job._id}`}>
            <h2>{job.title}</h2>
          </Link>
          <p>{job.description}</p>
          <p>Company: {job.company}</p>
          <p>Location: {job.location}</p>
          <hr />
        </div>
      ))}
    </div>
  );
};

export default HomePage;

JobDetailsPage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const JobDetailsPage = () => {
  const { id } = useParams();
  const [job, setJob] = useState({});
  const [isApplied, setIsApplied] = useState(false);

  useEffect(() => {
    const fetchJob = async () => {
      const { data } = await axios.get(`/api/jobs/${id}`);
      setJob(data);
    };

    fetchJob();
  }, [id]);

  const handleApply = async () => {
    const token = localStorage.getItem('token');
    await axios.post(`/api/jobs/apply/${id}`, {}, {
      headers: { Authorization: token },
    });
    setIsApplied(true);
  };

  return (
    <div>
      <h1>{job.title}</h1>
      <p>{job.description}</p>
      <p>Company: {job.company}</p>
      <p>Location: {job.location}</p>
      <button onClick={handleApply} disabled={isApplied}>
        {isApplied ? 'Applied' : 'Apply'}
      </button>
    </div>
  );
};

export default JobDetailsPage;

ProfilePage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ProfilePage = () => {
  const [user, setUser] = useState({});

  useEffect(() => {
    const fetchUser = async () => {
      const token = localStorage.getItem('token');
      const { data } = await axios.get('/api/users/profile', {
        headers: { Authorization: token },
      });
      setUser(data);
    };

    fetchUser();
  }, []);

  return (
    <div>
      <h1>Profile</h1>
      <p>Name: {user.name}</p>
      <p>Email: {user.email}</p>
      <h2>Applied Jobs:</h2>
      <ul>
        {user.appliedJobs?.map(job => (
          <li key={job._id}>{job.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default ProfilePage;

Step 3: Configure React Router
In App.js, set up the routes for navigation:

App.js:
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './pages/HomePage';
import JobDetailsPage from './pages/JobDetailsPage';
import ProfilePage from './pages/ProfilePage';

const App = () => {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={HomePage} />
        <Route path="/jobs/:id" component={JobDetailsPage} />
        <Route path="/profile" component={ProfilePage} />
        {/* Additional Routes for registration, etc. */}
      </Switch>
    </Router>
  );
};

export default App;

5. Run the Application

Step 1: Run the Backend
In the backend directory:
npm start

Step 2: Run the Frontend
In the frontend directory:
npm start
