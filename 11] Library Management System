1. Initialize the Project
Create a new directory for the project and initialize it:
mkdir library-management-system
cd library-management-system
git init
npm init -y


2. Set Up the Backend (Node.js + Express + MongoDB)
Install dependencies:
npm install express mongoose dotenv bcryptjs jsonwebtoken cors
npm install --save-dev nodemon


Project Structure:
library-management-system/
├── backend/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── config/
│   ├── server.js
├── frontend/
└── .env


server.js: Set up Express server and MongoDB connection.
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.log(err));

// Routes
app.use('/api/users', require('./routes/userRoutes'));
app.use('/api/books', require('./routes/bookRoutes'));
app.use('/api/records', require('./routes/recordRoutes'));

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
.env: Configure environment variables.
MONGO_URI=mongodb://localhost:27017/library-management
JWT_SECRET=your_jwt_secret


3. Create Models (MongoDB Schema)
User Model (models/User.js):
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, default: 'Member' }, // Admin or Librarian
}, { timestamps: true });

UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});
module.exports = mongoose.model('User', UserSchema);


Book Model (models/Book.js):
const mongoose = require('mongoose');

const BookSchema = new mongoose.Schema({
  title: { type: String, required: true },
  author: { type: String, required: true },
  genre: { type: String, required: true },
  publishedDate: { type: Date, required: true },
  availableCopies: { type: Number, required: true },
}, { timestamps: true });

module.exports = mongoose.model('Book', BookSchema);


Record Model (models/Record.js):
const mongoose = require('mongoose');

const RecordSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  book: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },
  borrowedDate: { type: Date, default: Date.now },
  returnDate: { type: Date },
  status: { type: String, enum: ['Borrowed', 'Returned'], default: 'Borrowed' },
}, { timestamps: true });

module.exports = mongoose.model('Record', RecordSchema);


4. Create Routes and Controllers
User Routes (routes/userRoutes.js):
const express = require('express');
const router = express.Router();
const { registerUser, loginUser, getUsers, getUserProfile } = require('../controllers/userController');
const { protect, admin } = require('../middleware/authMiddleware');

router.post('/register', registerUser);
router.post('/login', loginUser);
router.get('/', protect, admin, getUsers); // Admin route to get all users
router.get('/profile', protect, getUserProfile);

module.exports = router;

Book Routes (routes/bookRoutes.js):
const express = require('express');
const router = express.Router();
const { addBook, getBooks, updateBook, deleteBook } = require('../controllers/bookController');
const { protect, admin } = require('../middleware/authMiddleware');

router.route('/')
  .post(protect, admin, addBook)
  .get(protect, getBooks);

router.route('/:id')
  .put(protect, admin, updateBook)
  .delete(protect, admin, deleteBook);

module.exports = router;
Record Routes (routes/recordRoutes.js):
const express = require('express');
const router = express.Router();
const { createRecord, getRecords, updateRecord, deleteRecord } = require('../controllers/recordController');
const { protect } = require('../middleware/authMiddleware');

router.route('/')
  .post(protect, createRecord)
  .get(protect, getRecords);

router.route('/:id')
  .put(protect, updateRecord)
  .delete(protect, deleteRecord);

module.exports = router;


5. Set Up Middleware
Auth Middleware (middleware/authMiddleware.js):
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  let token;

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      token = req.headers.authorization.split(' ')[1];

      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = await User.findById(decoded.id).select('-password');

      next();
    } catch (error) {
      res.status(401);
      throw new Error('Not authorized, token failed');
    }
  }

  if (!token) {
    res.status(401);
    throw new Error('Not authorized, no token');
  }
};

const admin = (req, res, next) => {
  if (req.user && req.user.role === 'Admin') {
    next();
  } else {
    res.status(403);
    throw new Error('Not authorized as an Admin');
  }
};

module.exports = { protect, admin };


6. Implement Frontend (React)
Set up React App:
npx create-react-app frontend
cd frontend
npm install axios react-router-dom
Project Structure:
java
Copy code
frontend/
├── public/
├── src/
│   ├── components/
│   ├── pages/
│   ├── context/
│   ├── App.js
│   ├── index.js
│   ├── index.css
└── package.json


App.js: Set up routing and context.
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import DashboardPage from './pages/DashboardPage';
import ManageBooksPage from './pages/ManageBooksPage';
import ManageUsersPage from './pages/ManageUsersPage';
import BorrowingRecordsPage from './pages/BorrowingRecordsPage';

const App = () => {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/register" element={<RegisterPage />} />
          <Route path="/dashboard" element={<DashboardPage />} />
          <Route path="/books" element={<ManageBooksPage />} />
          <Route path="/users" element={<ManageUsersPage />} />
          <Route path="/records" element={<BorrowingRecordsPage />} />
        </Routes>
      </AuthProvider>
    </Router>
  );
};

export default App;


Auth Context (context/AuthContext.js):
import React, { createContext, useState } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    setUser(userData);
    localStorage.setItem('user', JSON.stringify(userData));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;

7. Implement Pages and Components
HomePage, LoginPage, RegisterPage, DashboardPage, ManageBooksPage, ManageUsersPage, BorrowingRecordsPage: Create pages for managing different aspects of the system. Use Axios to interact with the backend API for CRUD operations.

8. Connect Frontend to Backend
Set up proxy in frontend/package.json to simplify API calls:
json
Copy code
"proxy": "http://localhost:5000"
Use Axios in components to make API requests (e.g., login, register, add book, get books).

9. Test and Deploy
Testing: Run the backend and frontend servers to test the application locally.
# In the backend directory
npm run server

# In the frontend directory
npm start
