Project Structure
mern-learning-portal/
├── backend/
│   ├── config/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── server.js
│   └── .env
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── App.js
│   │   └── index.js
│   └── package.json
└── README.md

3. Backend Setup
Step 1: Initialize the Backend
Create the Backend Directory:

mkdir backend && cd backend
Initialize a Node.js Project:

npm init -y
Install Necessary Dependencies:

npm install express mongoose dotenv cors
Create Basic Files and Folders:
Create server.js, config, controllers, models, routes folders.

Step 2: Set Up the Server

server.js:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

// Initialize the app
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch((err) => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/courses', require('./routes/courseRoutes'));
app.use('/api/users', require('./routes/userRoutes'));

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

Step 3: Configure Environment Variables
Create a .env file in the backend directory:

MONGO_URI=mongodb://localhost:27017/mern-learning-portal
Replace the MongoDB URI with your own if you're using MongoDB Atlas or a different setup.

Step 4: Define Models
Course Model: Create a models folder and add a file named Course.js:


models/Course.js:
const mongoose = require('mongoose');

const courseSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  lessons: [
    {
      title: String,
      content: String,
    },
  ],
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
  },
}, {
  timestamps: true,
});

module.exports = mongoose.model('Course', courseSchema);

User Model: Add a file named User.js:
models/User.js:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  enrolledCourses: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Course',
    },
  ],
}, {
  timestamps: true,
});

module.exports = mongoose.model('User', userSchema);

Step 5: Create Controllers
Create a controllers folder and add files for courses and users.

courseController.js:
const Course = require('../models/Course');

// Create a new course
const createCourse = async (req, res) => {
  const { title, description, lessons } = req.body;

  try {
    const newCourse = new Course({ title, description, lessons, createdBy: req.user.id });
    const savedCourse = await newCourse.save();
    res.status(201).json(savedCourse);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get all courses
const getAllCourses = async (req, res) => {
  try {
    const courses = await Course.find({});
    res.status(200).json(courses);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get a single course by ID
const getCourseById = async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (course) {
      res.status(200).json(course);
    } else {
      res.status(404).json({ message: 'Course not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Update a course
const updateCourse = async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (course) {
      course.title = req.body.title || course.title;
      course.description = req.body.description || course.description;
      course.lessons = req.body.lessons || course.lessons;

      const updatedCourse = await course.save();
      res.json(updatedCourse);
    } else {
      res.status(404).json({ message: 'Course not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Delete a course
const deleteCourse = async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (course) {
      await course.remove();
      res.json({ message: 'Course removed' });
    } else {
      res.status(404).json({ message: 'Course not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  createCourse,
  getAllCourses,
  getCourseById,
  updateCourse,
  deleteCourse,
};

userController.js:
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Register a new user
const registerUser = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Login a user
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (user && await bcrypt.compare(password, user.password)) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Invalid credentials' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Get user profile
const getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Enroll in a course
const enrollInCourse = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (user) {
      user.enrolledCourses.push(req.params.courseId);
      await user.save();
      res.json(user);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  registerUser,
  loginUser,
  getUserProfile,
  enrollInCourse,
};
module.exports = auth;

4. Frontend Setup
Step 1: Initialize React Application
Create the Frontend Directory:

mkdir frontend && cd frontend
Initialize a new React Application:


npx create-react-app .
Install Necessary Dependencies:

npm install axios react-router-dom

Step 2: Create Components and Pages

HomePage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const HomePage = () => {
  const [courses, setCourses] = useState([]);

  useEffect(() => {
    const fetchCourses = async () => {
      const { data } = await axios.get('/api/courses');
      setCourses(data);
    };

    fetchCourses();
  }, []);

  return (
    <div>
      <h1>Available Courses</h1>
      {courses.map(course => (
        <div key={course._id}>
          <Link to={`/courses/${course._id}`}>
            <h2>{course.title}</h2>
          </Link>
          <p>{course.description}</p>
          <hr />
        </div>
      ))}
    </div>
  );
};

export default HomePage;

CourseDetailsPage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const CourseDetailsPage = () => {
  const { id } = useParams();
  const [course, setCourse] = useState({});

  useEffect(() => {
    const fetchCourse = async () => {
      const { data } = await axios.get(`/api/courses/${id}`);
      setCourse(data);
    };

    fetchCourse();
  }, [id]);

  return (
    <div>
      <h1>{course.title}</h1>
      <p>{course.description}</p>
      <div>
        <h3>Lessons:</h3>
        {course.lessons?.map((lesson, index) => (
          <div key={index}>
            <h4>{lesson.title}</h4>
            <p>{lesson.content}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CourseDetailsPage;

ProfilePage.js:
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ProfilePage = () => {
  const [user, setUser] = useState({});

  useEffect(() => {
    const fetchUser = async () => {
      const token = localStorage.getItem('token');
      const { data } = await axios.get('/api/users/profile', {
        headers: {
          Authorization: token,
        },
      });
      setUser(data);
    };

    fetchUser();
  }, []);

  return (
    <div>
      <h1>Profile</h1>
      <p>Name: {user.name}</p>
      <p>Email: {user.email}</p>
      <h2>Enrolled Courses:</h2>
      <ul>
        {user.enrolledCourses?.map(course => (
          <li key={course._id}>{course.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default ProfilePage;

Step 3: Configure React Router
In App.js, set up the routes for navigation:

App.js:
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './pages/HomePage';
import CourseDetailsPage from './pages/CourseDetailsPage';
import ProfilePage from './pages/ProfilePage';

const App = () => {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={HomePage} />
        <Route path="/courses/:id" component={CourseDetailsPage} />
        <Route path="/profile" component={ProfilePage} />
        {/* Additional Routes for Enroll, etc. */}
      </Switch>
    </Router>
  );
};

export default App;

5. Run the Application
Step 1: Run the Backend
In the backend directory:
npm start

Step 2: Run the Frontend
In the frontend directory:
npm start
